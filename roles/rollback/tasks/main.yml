- name: Stop EC2 instance
  amazon.aws.ec2_instance:
    instance_ids: "{{ instance_id }}"
    region: "{{ aws_region }}"
    state: stopped
    wait: yes
  delegate_to: "{{ ansible_server_id }}"

- name: Get EC2 instance volume info
  amazon.aws.ec2_vol_info:
    filters:
      volume-id: "{{ ec2_instance.instances[0].block_device_mappings[0].ebs.volume_id }}"
    region: "{{ aws_region }}"
  register: volume_facts
  delegate_to: "{{ ansible_server_id }}"

- name: Detach a volume from EC instance
  amazon.aws.ec2_vol:
    id: "{{ volume_facts.volumes[0].id }}"
    instance: None
    region: "{{ aws_region }}"
  delegate_to: "{{ ansible_server_id }}"

- name: Create volume from snapshot and attach it to instance
  amazon.aws.ec2_vol:
    instance: "{{ instance_id }}"
    region: "{{ volume_facts.volumes[0].region }}"
    volume_type: "{{ volume_facts.volumes[0].type }}"
    snapshot: "{{ snapshots_info.snapshots[0].snapshot_id }}"
    device_name: "{{ ec2_instance.instances[0].block_device_mappings[0].device_name }}"
    delete_on_termination: true
  register: volume_info
  delegate_to: "{{ ansible_server_id }}"

- name: Start EC2 instance
  amazon.aws.ec2_instance:
    instance_ids: "{{ instance_id }}"
    region: "{{ aws_region }}"
    state: running
    wait: yes
  delegate_to: "{{ ansible_server_id }}"
  register: successfully_recovered

- name: Remove old volume
  amazon.aws.ec2_vol:
    id: "{{ volume_facts.volumes[0].id }}"
    state: absent
    region: "{{ aws_region }}"
  delegate_to: "{{ ansible_server_id }}"